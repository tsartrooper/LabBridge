// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                  String            @id @default(cuid())
  name                String?
  email               String            @unique
  emailVerified       DateTime?
  image               String?
  password            String?
  role                String?                  
  salt                String?
  accounts            Account[]
  sessions            Session[]

  resetToken          ResetToken?
  verifyEmailToken    VerifyEmailToken?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  researchNeeds       ResearchNeed[]    
  donations           Donation[]
  
  sentRequests        CollaborationRequest[] @relation("SentRequests")
  receivedRequests    CollaborationRequest[] @relation("ReceivedRequests")
  messagesSent        Message[]      @relation("MessagesSent")
  messagesReceived    Message[]   @relation("MessagesReceived")
  
  WorkspaceFiles      WorkspaceFile[]
  WorkspaceMessages    WorkspaceMessage[]

  researcherCollabs     Collaboration[]   @relation("researcher")
  collaboratorCollabs   Collaboration[]   @relation("collaborator")

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

model MagicLink {
  id             Int       @id @default(autoincrement())
  email          String    @unique
  token          String?
  tokenExpiresAt DateTime?

  @@map("magic_links")
}

model ResetToken {
  id             Int       @id @default(autoincrement())
  userId         String    @unique
  token          String?
  tokenExpiresAt DateTime?
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reset_tokens")
}

model VerifyEmailToken {
  id             Int       @id @default(autoincrement())
  userId         String    @unique
  token          String?
  tokenExpiresAt DateTime?
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("verify_email_tokens")
}

model ResearchNeed {
  id              String    @id @default(cuid())
  ownerId         String
  owner           User      @relation(fields: [ownerId], references: [id])
  title           String
  description     String
  requiredFormat  String
  exampleSchema   String?
  rewardInfo      String?
  status          String    @default("ACTIVE")
  createdAt       DateTime  @default(now())
  donations       Donation[]
  dataType        String
  requests        CollaborationRequest[]
  collaborations  Collaboration[]

  @@map("research_needs")
}

model Donation {
  id             String    @id @default(cuid())
  researchNeedId String
  researchNeed   ResearchNeed @relation(fields: [researchNeedId], references: [id])
  donorId        String
  donor          User       @relation(fields: [donorId], references: [id])
  originalS3Key  String
  processedS3Key String?
  fileType       String
  size           Int
  status         String     @default("PENDING")
  anonymizationReport String?
  consentGiven   Boolean
  createdAt      DateTime  @default(now())

  @@map("donations")
}

model CollaborationRequest {
  id                String        @id @default(cuid())
  title             String  
  sender            User          @relation("SentRequests", fields: [senderId], references: [id])
  senderId          String
  receiver          User          @relation("ReceivedRequests", fields: [receiverId], references: [id])
  receiverId        String
  researchNeed      ResearchNeed  @relation(fields: [researchNeedId], references: [id])
  researchNeedId    String
  contributionType  String        @default("")
  message           String        @default("")
  status            String        @default("PENDING")
  createdAt         DateTime      @default(now())
  
  collaboration     Collaboration?

  @@map("collaboration_requests")
}

model Message {
  id          String   @id @default(cuid())
  sender      User     @relation("MessagesSent", fields: [senderId], references: [id])
  senderId    String
  receiver    User     @relation("MessagesReceived", fields: [receiverId], references: [id])
  receiverId  String
  content     String
  createdAt   DateTime @default(now())
  researchNeedId String

  @@map("messages")
}

model WorkspaceMessage {
  id              String        @id @default(cuid())
  collaboration   Collaboration @relation(fields: [collaborationId], references: [id])
  collaborationId String

  sender          User          @relation(fields: [senderId], references: [id])
  senderId        String

  content         String
  createdAt       DateTime @default(now())
}

model Collaboration {
  id              String                @id @default(cuid())
  researchNeed    ResearchNeed          @relation(fields: [researchNeedId], references: [id])
  researchNeedId  String
  researcher      User                  @relation(name:"researcher", fields: [researcherId], references: [id])
  researcherId    String

  collaborator    User                  @relation(name:"collaborator", fields: [collaboratorId], references: [id])
  collaboratorId  String
  request         CollaborationRequest  @relation(fields: [requestId], references: [id])
  requestId       String                @unique
  status          String                @default("IN_PROGRESS")
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  messages        WorkspaceMessage[]
  files           WorkspaceFile[]
}


model WorkspaceFile{
  id                String                @id @default(cuid())
  collaboration     Collaboration         @relation(fields: [collaborationId], references: [id])
  collaborationId   String
  sender            User                  @relation(fields: [senderId], references: [id])
  senderId          String

  title             String                @default("shared_file")

  fileUrl           String
  description       String?
  createdAt         DateTime              @default(now())
}