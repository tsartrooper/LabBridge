"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/zsa-react";
exports.ids = ["vendor-chunks/zsa-react"];
exports.modules = {

/***/ "(ssr)/./node_modules/zsa-react/dist/index.mjs":
/*!***********************************************!*\
  !*** ./node_modules/zsa-react/dist/index.mjs ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useServerAction: () => (/* binding */ useServerAction)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* __next_internal_client_entry_do_not_use__ useServerAction auto */ // src/index.ts\n\n// src/optimistic.ts\nvar evaluateOptimisticInput = (fn, oldResult, result)=>{\n    function isFunction(value) {\n        return typeof value === \"function\";\n    }\n    return isFunction(fn) ? fn(oldResult.status === \"empty\" ? result.data : oldResult.result.data) : fn;\n};\n// src/results.ts\nvar calculateResultFromState = (state)=>{\n    const { isPending, oldResult, result } = state;\n    if (isPending && oldResult.status === \"empty\") {\n        return {\n            isPending: true,\n            isOptimistic: false,\n            data: state.persistDataWhilePending ? result.data : void 0,\n            isError: false,\n            error: state.persistErrorWhilePending ? result.error : void 0,\n            isSuccess: false,\n            status: \"pending\"\n        };\n    } else if (isPending && oldResult.status === \"filled\" && result.status === \"success\") {\n        return {\n            isPending: true,\n            isOptimistic: true,\n            data: result.data,\n            isError: false,\n            error: void 0,\n            isSuccess: false,\n            status: \"pending\"\n        };\n    } else if (result.status === \"success\") {\n        return {\n            isPending: false,\n            isOptimistic: false,\n            data: result.data,\n            isError: false,\n            error: void 0,\n            isSuccess: true,\n            status: \"success\"\n        };\n    } else if (result.status === \"error\") {\n        return {\n            isPending: false,\n            data: void 0,\n            isError: true,\n            error: result.error,\n            isOptimistic: false,\n            isSuccess: false,\n            status: \"error\"\n        };\n    } else {\n        return {\n            isPending: false,\n            data: void 0,\n            isOptimistic: false,\n            isError: false,\n            error: void 0,\n            isSuccess: false,\n            status: \"idle\"\n        };\n    }\n};\nvar getEmptyResult = (initialData)=>initialData === void 0 ? // if there is no initial data\n    {\n        status: \"idle\",\n        error: void 0,\n        data: void 0\n    } : {\n        // if there is initial data\n        status: \"success\",\n        error: void 0,\n        data: initialData\n    };\nvar getEmptyOldResult = ()=>({\n        status: \"empty\",\n        result: void 0\n    });\n// src/retries.ts\nvar getRetryDelay = (retryConfig, retryCount, err)=>{\n    const shouldRetry = retryConfig ? retryCount + 1 < retryConfig.maxAttempts : false;\n    let retryDelay = 0;\n    const retryDelayOpt = retryConfig?.delay;\n    if (retryDelayOpt && typeof retryDelayOpt === \"function\") {\n        retryDelay = retryDelayOpt(retryCount + 1, err);\n    } else if (retryDelayOpt && typeof retryDelayOpt === \"number\") {\n        retryDelay = retryDelayOpt;\n    }\n    if (!shouldRetry) return -1;\n    return retryDelay;\n};\n// src/utils.ts\nvar mergePossibleObjects = (obj1, obj2)=>{\n    if (obj1 === void 0 && obj2 === void 0) {\n        return void 0;\n    }\n    if (obj1 === void 0) return obj2;\n    if (obj2 === void 0) return obj1;\n    if (typeof obj1 !== \"object\" || typeof obj2 !== \"object\") {\n        return obj2;\n    }\n    return {\n        ...obj1,\n        ...obj2\n    };\n};\n// src/index.ts\nvar useServerAction = (serverAction, opts)=>{\n    const initialData = opts?.initialData;\n    const bindArgs = opts?.bind;\n    const [result, $setResult] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(getEmptyResult(initialData));\n    const resultRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(getEmptyResult(initialData));\n    const [oldResult, $setOldResult] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(getEmptyOldResult());\n    const oldResultRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(getEmptyOldResult());\n    const lastRetryId = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(0);\n    const retryCount = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(0);\n    const executeRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    const [isTransitioning, startTransition] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useTransition)();\n    const [isExecuting, setExecuting] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const status = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(\"idle\");\n    const setResult = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((result2)=>{\n        $setResult(result2);\n        resultRef.current = result2;\n    }, [\n        $setResult\n    ]);\n    const setOldResult = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((oldResult2)=>{\n        $setOldResult(oldResult2);\n        oldResultRef.current = oldResult2;\n    }, [\n        $setOldResult\n    ]);\n    const internalExecute = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (input, overrideData, args)=>{\n        const { isFromRetryId } = args || {};\n        if (isFromRetryId && lastRetryId.current !== isFromRetryId) {\n            return [\n                null,\n                {\n                    message: \"Could not successfully execute the server action\",\n                    data: \"Could not successfully execute the server action\",\n                    stack: \"\",\n                    name: \"ZSAError\",\n                    code: \"ERROR\"\n                }\n            ];\n        }\n        if (!isFromRetryId) {\n            retryCount.current = 0;\n        }\n        const retryId = Math.floor(Math.random() * 1e4);\n        lastRetryId.current = retryId;\n        if (opts?.onStart) opts.onStart();\n        status.current = \"pending\";\n        setExecuting(true);\n        let data, err;\n        await serverAction(input, overrideData).then((response)=>{\n            if (response) {\n                ;\n                [data, err] = response;\n            }\n        });\n        if (err) {\n            let retryDelay = getRetryDelay(opts?.retry, retryCount.current, err);\n            if (retryDelay >= 0) {\n                retryCount.current += 1;\n                return await new Promise((resolve)=>setTimeout(()=>{\n                        internalExecute(input, overrideData, {\n                            ...args || {},\n                            isFromRetryId: retryId\n                        }).then(resolve);\n                    }, retryDelay));\n            }\n            if (oldResult.status === \"filled\") {\n                setResult(oldResult.result);\n            } else {\n                setResult({\n                    error: err,\n                    data: void 0,\n                    status: \"error\"\n                });\n            }\n            setOldResult({\n                status: \"empty\",\n                result: void 0\n            });\n            status.current = \"error\";\n            setExecuting(false);\n            return [\n                data,\n                err\n            ];\n        }\n        const res = {\n            error: void 0,\n            data: data ?? void 0,\n            status: \"success\"\n        };\n        setResult(res);\n        setOldResult({\n            status: \"empty\",\n            result: void 0\n        });\n        status.current = \"success\";\n        setExecuting(false);\n        return [\n            data,\n            err\n        ];\n    }, [\n        serverAction\n    ]);\n    const execute = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (...opts2)=>{\n        return await new Promise((resolve)=>{\n            executeRef.current = resolve;\n            startTransition(()=>{\n                internalExecute(opts2[0], mergePossibleObjects(bindArgs, opts2[1]));\n            });\n        });\n    }, [\n        internalExecute\n    ]);\n    const executeFormAction = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (...opts2)=>{\n        return await new Promise((resolve)=>{\n            startTransition(()=>{\n                internalExecute(opts2[0], bindArgs);\n            });\n            executeRef.current = resolve;\n            resolve(null);\n        });\n    }, [\n        internalExecute\n    ]);\n    const setOptimistic = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (fn)=>{\n        const data = evaluateOptimisticInput(fn, oldResultRef.current, resultRef.current);\n        if (oldResult.status === \"empty\") {\n            setOldResult({\n                status: \"filled\",\n                result: {\n                    ...result\n                }\n            });\n        }\n        setResult({\n            error: void 0,\n            data: data ?? void 0,\n            status: \"success\"\n        });\n    }, [\n        execute\n    ]);\n    const reset = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        setResult(getEmptyResult());\n        setOldResult(getEmptyOldResult());\n        setExecuting(false);\n        status.current = \"idle\";\n        lastRetryId.current = 0;\n        retryCount.current = 0;\n    }, []);\n    const isRunningCallbacks = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    const handleCallbacks = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        if (!executeRef.current || isRunningCallbacks.current) {\n            return;\n        }\n        isRunningCallbacks.current = true;\n        if (status.current === \"success\") {\n            executeRef.current?.([\n                resultRef.current.data,\n                null\n            ]);\n            opts?.onSuccess?.({\n                data: resultRef.current.data\n            });\n            opts?.onFinish?.([\n                resultRef.current.data,\n                null\n            ]);\n        }\n        if (status.current === \"error\") {\n            executeRef.current?.([\n                null,\n                resultRef.current.error\n            ]);\n            opts?.onError?.({\n                err: resultRef.current.error\n            });\n            opts?.onFinish?.([\n                null,\n                resultRef.current.error\n            ]);\n        }\n        executeRef.current = void 0;\n        status.current = \"idle\";\n        isRunningCallbacks.current = false;\n    }, [\n        opts?.onError,\n        opts?.onFinish,\n        opts?.onSuccess\n    ]);\n    const isPending = isTransitioning || isExecuting;\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (isPending) return;\n        handleCallbacks();\n    }, [\n        status.current,\n        isPending\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        return ()=>{\n            if (executeRef.current !== void 0) {\n                handleCallbacks();\n            }\n        };\n    }, []);\n    const final = calculateResultFromState({\n        isPending,\n        oldResult,\n        result: resultRef.current,\n        persistDataWhilePending: opts?.persistDataWhilePending,\n        persistErrorWhilePending: opts?.persistErrorWhilePending\n    });\n    return {\n        ...final,\n        reset,\n        execute,\n        setOptimistic,\n        executeFormAction\n    };\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvenNhLXJlYWN0L2Rpc3QvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7O3FFQUVBLGVBQWU7QUFDaUU7QUFFaEYsb0JBQW9CO0FBQ3BCLElBQUlLLDBCQUEwQixDQUFDQyxJQUFJQyxXQUFXQztJQUM1QyxTQUFTQyxXQUFXQyxLQUFLO1FBQ3ZCLE9BQU8sT0FBT0EsVUFBVTtJQUMxQjtJQUNBLE9BQU9ELFdBQVdILE1BQU1BLEdBQUdDLFVBQVVJLE1BQU0sS0FBSyxVQUFVSCxPQUFPSSxJQUFJLEdBQUdMLFVBQVVDLE1BQU0sQ0FBQ0ksSUFBSSxJQUFJTjtBQUNuRztBQUVBLGlCQUFpQjtBQUNqQixJQUFJTywyQkFBMkIsQ0FBQ0M7SUFDOUIsTUFBTSxFQUFFQyxTQUFTLEVBQUVSLFNBQVMsRUFBRUMsTUFBTSxFQUFFLEdBQUdNO0lBQ3pDLElBQUlDLGFBQWFSLFVBQVVJLE1BQU0sS0FBSyxTQUFTO1FBQzdDLE9BQU87WUFDTEksV0FBVztZQUNYQyxjQUFjO1lBQ2RKLE1BQU1FLE1BQU1HLHVCQUF1QixHQUFHVCxPQUFPSSxJQUFJLEdBQUcsS0FBSztZQUN6RE0sU0FBUztZQUNUQyxPQUFPTCxNQUFNTSx3QkFBd0IsR0FBR1osT0FBT1csS0FBSyxHQUFHLEtBQUs7WUFDNURFLFdBQVc7WUFDWFYsUUFBUTtRQUNWO0lBQ0YsT0FBTyxJQUFJSSxhQUFhUixVQUFVSSxNQUFNLEtBQUssWUFBWUgsT0FBT0csTUFBTSxLQUFLLFdBQVc7UUFDcEYsT0FBTztZQUNMSSxXQUFXO1lBQ1hDLGNBQWM7WUFDZEosTUFBTUosT0FBT0ksSUFBSTtZQUNqQk0sU0FBUztZQUNUQyxPQUFPLEtBQUs7WUFDWkUsV0FBVztZQUNYVixRQUFRO1FBQ1Y7SUFDRixPQUFPLElBQUlILE9BQU9HLE1BQU0sS0FBSyxXQUFXO1FBQ3RDLE9BQU87WUFDTEksV0FBVztZQUNYQyxjQUFjO1lBQ2RKLE1BQU1KLE9BQU9JLElBQUk7WUFDakJNLFNBQVM7WUFDVEMs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QUM7WUFDcERvQixNQUFNZ0QsVUFBVTtnQkFDZDNELEtBQUtlLFVBQVVXLE9BQU8sQ0FBQ25DLEtBQUs7WUFDOUI7WUFDQW9CLE1BQU0rQyxXQUFXO2dCQUFDO2dCQUFNM0MsVUFBVVcsT0FBTyxDQUFDbkMsS0FBSzthQUFDO1FBQ2xEO1FBQ0E0QixXQUFXTyxPQUFPLEdBQUcsS0FBSztRQUMxQjNDLE9BQU8yQyxPQUFPLEdBQUc7UUFDakI2QixtQkFBbUI3QixPQUFPLEdBQUc7SUFDL0IsR0FBRztRQUFDZixNQUFNZ0Q7UUFBU2hELE1BQU0rQztRQUFVL0MsTUFBTThDO0tBQVU7SUFDbkQsTUFBTXRFLFlBQVlpQyxtQkFBbUJFO0lBQ3JDakQsZ0RBQVNBLENBQUM7UUFDUixJQUFJYyxXQUNGO1FBQ0ZxRTtJQUNGLEdBQUc7UUFBQ3pFLE9BQU8yQyxPQUFPO1FBQUV2QztLQUFVO0lBQzlCZCxnREFBU0EsQ0FBQztRQUNSLE9BQU87WUFDTCxJQUFJOEMsV0FBV08sT0FBTyxLQUFLLEtBQUssR0FBRztnQkFDakM4QjtZQUNGO1FBQ0Y7SUFDRixHQUFHLEVBQUU7SUFDTCxNQUFNSSxRQUFRM0UseUJBQXlCO1FBQ3JDRTtRQUNBUjtRQUNBQyxRQUFRbUMsVUFBVVcsT0FBTztRQUN6QnJDLHlCQUF5QnNCLE1BQU10QjtRQUMvQkcsMEJBQTBCbUIsTUFBTW5CO0lBQ2xDO0lBQ0EsT0FBTztRQUNMLEdBQUdvRSxLQUFLO1FBQ1JOO1FBQ0FKO1FBQ0FHO1FBQ0FEO0lBQ0Y7QUFDRjtBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1hdXRoLXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvenNhLXJlYWN0L2Rpc3QvaW5kZXgubWpzP2ZmMjUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2UgY2xpZW50XCI7XG5cbi8vIHNyYy9pbmRleC50c1xuaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZUVmZmVjdCwgdXNlUmVmLCB1c2VTdGF0ZSwgdXNlVHJhbnNpdGlvbiB9IGZyb20gXCJyZWFjdFwiO1xuXG4vLyBzcmMvb3B0aW1pc3RpYy50c1xudmFyIGV2YWx1YXRlT3B0aW1pc3RpY0lucHV0ID0gKGZuLCBvbGRSZXN1bHQsIHJlc3VsdCkgPT4ge1xuICBmdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiO1xuICB9XG4gIHJldHVybiBpc0Z1bmN0aW9uKGZuKSA/IGZuKG9sZFJlc3VsdC5zdGF0dXMgPT09IFwiZW1wdHlcIiA/IHJlc3VsdC5kYXRhIDogb2xkUmVzdWx0LnJlc3VsdC5kYXRhKSA6IGZuO1xufTtcblxuLy8gc3JjL3Jlc3VsdHMudHNcbnZhciBjYWxjdWxhdGVSZXN1bHRGcm9tU3RhdGUgPSAoc3RhdGUpID0+IHtcbiAgY29uc3QgeyBpc1BlbmRpbmcsIG9sZFJlc3VsdCwgcmVzdWx0IH0gPSBzdGF0ZTtcbiAgaWYgKGlzUGVuZGluZyAmJiBvbGRSZXN1bHQuc3RhdHVzID09PSBcImVtcHR5XCIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaXNQZW5kaW5nOiB0cnVlLFxuICAgICAgaXNPcHRpbWlzdGljOiBmYWxzZSxcbiAgICAgIGRhdGE6IHN0YXRlLnBlcnNpc3REYXRhV2hpbGVQZW5kaW5nID8gcmVzdWx0LmRhdGEgOiB2b2lkIDAsXG4gICAgICBpc0Vycm9yOiBmYWxzZSxcbiAgICAgIGVycm9yOiBzdGF0ZS5wZXJzaXN0RXJyb3JXaGlsZVBlbmRpbmcgPyByZXN1bHQuZXJyb3IgOiB2b2lkIDAsXG4gICAgICBpc1N1Y2Nlc3M6IGZhbHNlLFxuICAgICAgc3RhdHVzOiBcInBlbmRpbmdcIlxuICAgIH07XG4gIH0gZWxzZSBpZiAoaXNQZW5kaW5nICYmIG9sZFJlc3VsdC5zdGF0dXMgPT09IFwiZmlsbGVkXCIgJiYgcmVzdWx0LnN0YXR1cyA9PT0gXCJzdWNjZXNzXCIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaXNQZW5kaW5nOiB0cnVlLFxuICAgICAgaXNPcHRpbWlzdGljOiB0cnVlLFxuICAgICAgZGF0YTogcmVzdWx0LmRhdGEsXG4gICAgICBpc0Vycm9yOiBmYWxzZSxcbiAgICAgIGVycm9yOiB2b2lkIDAsXG4gICAgICBpc1N1Y2Nlc3M6IGZhbHNlLFxuICAgICAgc3RhdHVzOiBcInBlbmRpbmdcIlxuICAgIH07XG4gIH0gZWxzZSBpZiAocmVzdWx0LnN0YXR1cyA9PT0gXCJzdWNjZXNzXCIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaXNQZW5kaW5nOiBmYWxzZSxcbiAgICAgIGlzT3B0aW1pc3RpYzogZmFsc2UsXG4gICAgICBkYXRhOiByZXN1bHQuZGF0YSxcbiAgICAgIGlzRXJyb3I6IGZhbHNlLFxuICAgICAgZXJyb3I6IHZvaWQgMCxcbiAgICAgIGlzU3VjY2VzczogdHJ1ZSxcbiAgICAgIHN0YXR1czogXCJzdWNjZXNzXCJcbiAgICB9O1xuICB9IGVsc2UgaWYgKHJlc3VsdC5zdGF0dXMgPT09IFwiZXJyb3JcIikge1xuICAgIHJldHVybiB7XG4gICAgICBpc1BlbmRpbmc6IGZhbHNlLFxuICAgICAgZGF0YTogdm9pZCAwLFxuICAgICAgaXNFcnJvcjogdHJ1ZSxcbiAgICAgIGVycm9yOiByZXN1bHQuZXJyb3IsXG4gICAgICBpc09wdGltaXN0aWM6IGZhbHNlLFxuICAgICAgaXNTdWNjZXNzOiBmYWxzZSxcbiAgICAgIHN0YXR1czogXCJlcnJvclwiXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4ge1xuICAgICAgaXNQZW5kaW5nOiBmYWxzZSxcbiAgICAgIGRhdGE6IHZvaWQgMCxcbiAgICAgIGlzT3B0aW1pc3RpYzogZmFsc2UsXG4gICAgICBpc0Vycm9yOiBmYWxzZSxcbiAgICAgIGVycm9yOiB2b2lkIDAsXG4gICAgICBpc1N1Y2Nlc3M6IGZhbHNlLFxuICAgICAgc3RhdHVzOiBcImlkbGVcIlxuICAgIH07XG4gIH1cbn07XG52YXIgZ2V0RW1wdHlSZXN1bHQgPSAoaW5pdGlhbERhdGEpID0+IGluaXRpYWxEYXRhID09PSB2b2lkIDAgPyAoXG4gIC8vIGlmIHRoZXJlIGlzIG5vIGluaXRpYWwgZGF0YVxuICB7XG4gICAgc3RhdHVzOiBcImlkbGVcIixcbiAgICBlcnJvcjogdm9pZCAwLFxuICAgIGRhdGE6IHZvaWQgMFxuICB9XG4pIDoge1xuICAvLyBpZiB0aGVyZSBpcyBpbml0aWFsIGRhdGFcbiAgc3RhdHVzOiBcInN1Y2Nlc3NcIixcbiAgZXJyb3I6IHZvaWQgMCxcbiAgZGF0YTogaW5pdGlhbERhdGFcbn07XG52YXIgZ2V0RW1wdHlPbGRSZXN1bHQgPSAoKSA9PiAoe1xuICBzdGF0dXM6IFwiZW1wdHlcIixcbiAgcmVzdWx0OiB2b2lkIDBcbn0pO1xuXG4vLyBzcmMvcmV0cmllcy50c1xudmFyIGdldFJldHJ5RGVsYXkgPSAocmV0cnlDb25maWcsIHJldHJ5Q291bnQsIGVycikgPT4ge1xuICBjb25zdCBzaG91bGRSZXRyeSA9IHJldHJ5Q29uZmlnID8gcmV0cnlDb3VudCArIDEgPCByZXRyeUNvbmZpZy5tYXhBdHRlbXB0cyA6IGZhbHNlO1xuICBsZXQgcmV0cnlEZWxheSA9IDA7XG4gIGNvbnN0IHJldHJ5RGVsYXlPcHQgPSByZXRyeUNvbmZpZz8uZGVsYXk7XG4gIGlmIChyZXRyeURlbGF5T3B0ICYmIHR5cGVvZiByZXRyeURlbGF5T3B0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICByZXRyeURlbGF5ID0gcmV0cnlEZWxheU9wdChyZXRyeUNvdW50ICsgMSwgZXJyKTtcbiAgfSBlbHNlIGlmIChyZXRyeURlbGF5T3B0ICYmIHR5cGVvZiByZXRyeURlbGF5T3B0ID09PSBcIm51bWJlclwiKSB7XG4gICAgcmV0cnlEZWxheSA9IHJldHJ5RGVsYXlPcHQ7XG4gIH1cbiAgaWYgKCFzaG91bGRSZXRyeSlcbiAgICByZXR1cm4gLTE7XG4gIHJldHVybiByZXRyeURlbGF5O1xufTtcblxuLy8gc3JjL3V0aWxzLnRzXG52YXIgbWVyZ2VQb3NzaWJsZU9iamVjdHMgPSAob2JqMSwgb2JqMikgPT4ge1xuICBpZiAob2JqMSA9PT0gdm9pZCAwICYmIG9iajIgPT09IHZvaWQgMCkge1xuICAgIHJldHVybiB2b2lkIDA7XG4gIH1cbiAgaWYgKG9iajEgPT09IHZvaWQgMClcbiAgICByZXR1cm4gb2JqMjtcbiAgaWYgKG9iajIgPT09IHZvaWQgMClcbiAgICByZXR1cm4gb2JqMTtcbiAgaWYgKHR5cGVvZiBvYmoxICE9PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBvYmoyICE9PSBcIm9iamVjdFwiKSB7XG4gICAgcmV0dXJuIG9iajI7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICAuLi5vYmoxLFxuICAgIC4uLm9iajJcbiAgfTtcbn07XG5cbi8vIHNyYy9pbmRleC50c1xudmFyIHVzZVNlcnZlckFjdGlvbiA9IChzZXJ2ZXJBY3Rpb24sIG9wdHMpID0+IHtcbiAgY29uc3QgaW5pdGlhbERhdGEgPSBvcHRzPy5pbml0aWFsRGF0YTtcbiAgY29uc3QgYmluZEFyZ3MgPSBvcHRzPy5iaW5kO1xuICBjb25zdCBbcmVzdWx0LCAkc2V0UmVzdWx0XSA9IHVzZVN0YXRlKFxuICAgIGdldEVtcHR5UmVzdWx0KGluaXRpYWxEYXRhKVxuICApO1xuICBjb25zdCByZXN1bHRSZWYgPSB1c2VSZWYoXG4gICAgZ2V0RW1wdHlSZXN1bHQoaW5pdGlhbERhdGEpXG4gICk7XG4gIGNvbnN0IFtvbGRSZXN1bHQsICRzZXRPbGRSZXN1bHRdID0gdXNlU3RhdGUoZ2V0RW1wdHlPbGRSZXN1bHQoKSk7XG4gIGNvbnN0IG9sZFJlc3VsdFJlZiA9IHVzZVJlZihnZXRFbXB0eU9sZFJlc3VsdCgpKTtcbiAgY29uc3QgbGFzdFJldHJ5SWQgPSB1c2VSZWYoMCk7XG4gIGNvbnN0IHJldHJ5Q291bnQgPSB1c2VSZWYoMCk7XG4gIGNvbnN0IGV4ZWN1dGVSZWYgPSB1c2VSZWYoKTtcbiAgY29uc3QgW2lzVHJhbnNpdGlvbmluZywgc3RhcnRUcmFuc2l0aW9uXSA9IHVzZVRyYW5zaXRpb24oKTtcbiAgY29uc3QgW2lzRXhlY3V0aW5nLCBzZXRFeGVjdXRpbmddID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBzdGF0dXMgPSB1c2VSZWYoXCJpZGxlXCIpO1xuICBjb25zdCBzZXRSZXN1bHQgPSB1c2VDYWxsYmFjayhcbiAgICAocmVzdWx0MikgPT4ge1xuICAgICAgJHNldFJlc3VsdChyZXN1bHQyKTtcbiAgICAgIHJlc3VsdFJlZi5jdXJyZW50ID0gcmVzdWx0MjtcbiAgICB9LFxuICAgIFskc2V0UmVzdWx0XVxuICApO1xuICBjb25zdCBzZXRPbGRSZXN1bHQgPSB1c2VDYWxsYmFjayhcbiAgICAob2xkUmVzdWx0MikgPT4ge1xuICAgICAgJHNldE9sZFJlc3VsdChvbGRSZXN1bHQyKTtcbiAgICAgIG9sZFJlc3VsdFJlZi5jdXJyZW50ID0gb2xkUmVzdWx0MjtcbiAgICB9LFxuICAgIFskc2V0T2xkUmVzdWx0XVxuICApO1xuICBjb25zdCBpbnRlcm5hbEV4ZWN1dGUgPSB1c2VDYWxsYmFjayhcbiAgICBhc3luYyAoaW5wdXQsIG92ZXJyaWRlRGF0YSwgYXJncykgPT4ge1xuICAgICAgY29uc3QgeyBpc0Zyb21SZXRyeUlkIH0gPSBhcmdzIHx8IHt9O1xuICAgICAgaWYgKGlzRnJvbVJldHJ5SWQgJiYgbGFzdFJldHJ5SWQuY3VycmVudCAhPT0gaXNGcm9tUmV0cnlJZCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgIG51bGwsXG4gICAgICAgICAge1xuICAgICAgICAgICAgbWVzc2FnZTogXCJDb3VsZCBub3Qgc3VjY2Vzc2Z1bGx5IGV4ZWN1dGUgdGhlIHNlcnZlciBhY3Rpb25cIixcbiAgICAgICAgICAgIGRhdGE6IFwiQ291bGQgbm90IHN1Y2Nlc3NmdWxseSBleGVjdXRlIHRoZSBzZXJ2ZXIgYWN0aW9uXCIsXG4gICAgICAgICAgICBzdGFjazogXCJcIixcbiAgICAgICAgICAgIG5hbWU6IFwiWlNBRXJyb3JcIixcbiAgICAgICAgICAgIGNvZGU6IFwiRVJST1JcIlxuICAgICAgICAgIH1cbiAgICAgICAgXTtcbiAgICAgIH1cbiAgICAgIGlmICghaXNGcm9tUmV0cnlJZCkge1xuICAgICAgICByZXRyeUNvdW50LmN1cnJlbnQgPSAwO1xuICAgICAgfVxuICAgICAgY29uc3QgcmV0cnlJZCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDFlNCk7XG4gICAgICBsYXN0UmV0cnlJZC5jdXJyZW50ID0gcmV0cnlJZDtcbiAgICAgIGlmIChvcHRzPy5vblN0YXJ0KVxuICAgICAgICBvcHRzLm9uU3RhcnQoKTtcbiAgICAgIHN0YXR1cy5jdXJyZW50ID0gXCJwZW5kaW5nXCI7XG4gICAgICBzZXRFeGVjdXRpbmcodHJ1ZSk7XG4gICAgICBsZXQgZGF0YSwgZXJyO1xuICAgICAgYXdhaXQgc2VydmVyQWN0aW9uKGlucHV0LCBvdmVycmlkZURhdGEpLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgIGlmIChyZXNwb25zZSkge1xuICAgICAgICAgIDtcbiAgICAgICAgICBbZGF0YSwgZXJyXSA9IHJlc3BvbnNlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgbGV0IHJldHJ5RGVsYXkgPSBnZXRSZXRyeURlbGF5KG9wdHM/LnJldHJ5LCByZXRyeUNvdW50LmN1cnJlbnQsIGVycik7XG4gICAgICAgIGlmIChyZXRyeURlbGF5ID49IDApIHtcbiAgICAgICAgICByZXRyeUNvdW50LmN1cnJlbnQgKz0gMTtcbiAgICAgICAgICByZXR1cm4gYXdhaXQgbmV3IFByb21pc2UoXG4gICAgICAgICAgICAocmVzb2x2ZSkgPT4gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgIGludGVybmFsRXhlY3V0ZShpbnB1dCwgb3ZlcnJpZGVEYXRhLCB7XG4gICAgICAgICAgICAgICAgLi4uYXJncyB8fCB7fSxcbiAgICAgICAgICAgICAgICBpc0Zyb21SZXRyeUlkOiByZXRyeUlkXG4gICAgICAgICAgICAgIH0pLnRoZW4ocmVzb2x2ZSk7XG4gICAgICAgICAgICB9LCByZXRyeURlbGF5KVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9sZFJlc3VsdC5zdGF0dXMgPT09IFwiZmlsbGVkXCIpIHtcbiAgICAgICAgICBzZXRSZXN1bHQob2xkUmVzdWx0LnJlc3VsdCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2V0UmVzdWx0KHtcbiAgICAgICAgICAgIGVycm9yOiBlcnIsXG4gICAgICAgICAgICBkYXRhOiB2b2lkIDAsXG4gICAgICAgICAgICBzdGF0dXM6IFwiZXJyb3JcIlxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHNldE9sZFJlc3VsdCh7XG4gICAgICAgICAgc3RhdHVzOiBcImVtcHR5XCIsXG4gICAgICAgICAgcmVzdWx0OiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIHN0YXR1cy5jdXJyZW50ID0gXCJlcnJvclwiO1xuICAgICAgICBzZXRFeGVjdXRpbmcoZmFsc2UpO1xuICAgICAgICByZXR1cm4gW2RhdGEsIGVycl07XG4gICAgICB9XG4gICAgICBjb25zdCByZXMgPSB7XG4gICAgICAgIGVycm9yOiB2b2lkIDAsXG4gICAgICAgIGRhdGE6IGRhdGEgPz8gdm9pZCAwLFxuICAgICAgICBzdGF0dXM6IFwic3VjY2Vzc1wiXG4gICAgICB9O1xuICAgICAgc2V0UmVzdWx0KHJlcyk7XG4gICAgICBzZXRPbGRSZXN1bHQoe1xuICAgICAgICBzdGF0dXM6IFwiZW1wdHlcIixcbiAgICAgICAgcmVzdWx0OiB2b2lkIDBcbiAgICAgIH0pO1xuICAgICAgc3RhdHVzLmN1cnJlbnQgPSBcInN1Y2Nlc3NcIjtcbiAgICAgIHNldEV4ZWN1dGluZyhmYWxzZSk7XG4gICAgICByZXR1cm4gW2RhdGEsIGVycl07XG4gICAgfSxcbiAgICBbc2VydmVyQWN0aW9uXVxuICApO1xuICBjb25zdCBleGVjdXRlID0gdXNlQ2FsbGJhY2soXG4gICAgYXN5bmMgKC4uLm9wdHMyKSA9PiB7XG4gICAgICByZXR1cm4gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgZXhlY3V0ZVJlZi5jdXJyZW50ID0gcmVzb2x2ZTtcbiAgICAgICAgc3RhcnRUcmFuc2l0aW9uKCgpID0+IHtcbiAgICAgICAgICBpbnRlcm5hbEV4ZWN1dGUob3B0czJbMF0sIG1lcmdlUG9zc2libGVPYmplY3RzKGJpbmRBcmdzLCBvcHRzMlsxXSkpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgW2ludGVybmFsRXhlY3V0ZV1cbiAgKTtcbiAgY29uc3QgZXhlY3V0ZUZvcm1BY3Rpb24gPSB1c2VDYWxsYmFjayhcbiAgICBhc3luYyAoLi4ub3B0czIpID0+IHtcbiAgICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICBzdGFydFRyYW5zaXRpb24oKCkgPT4ge1xuICAgICAgICAgIGludGVybmFsRXhlY3V0ZShvcHRzMlswXSwgYmluZEFyZ3MpO1xuICAgICAgICB9KTtcbiAgICAgICAgZXhlY3V0ZVJlZi5jdXJyZW50ID0gcmVzb2x2ZTtcbiAgICAgICAgcmVzb2x2ZShudWxsKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgW2ludGVybmFsRXhlY3V0ZV1cbiAgKTtcbiAgY29uc3Qgc2V0T3B0aW1pc3RpYyA9IHVzZUNhbGxiYWNrKFxuICAgIGFzeW5jIChmbikgPT4ge1xuICAgICAgY29uc3QgZGF0YSA9IGV2YWx1YXRlT3B0aW1pc3RpY0lucHV0KFxuICAgICAgICBmbixcbiAgICAgICAgb2xkUmVzdWx0UmVmLmN1cnJlbnQsXG4gICAgICAgIHJlc3VsdFJlZi5jdXJyZW50XG4gICAgICApO1xuICAgICAgaWYgKG9sZFJlc3VsdC5zdGF0dXMgPT09IFwiZW1wdHlcIikge1xuICAgICAgICBzZXRPbGRSZXN1bHQoe1xuICAgICAgICAgIHN0YXR1czogXCJmaWxsZWRcIixcbiAgICAgICAgICByZXN1bHQ6IHsgLi4ucmVzdWx0IH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBzZXRSZXN1bHQoe1xuICAgICAgICBlcnJvcjogdm9pZCAwLFxuICAgICAgICBkYXRhOiBkYXRhID8/IHZvaWQgMCxcbiAgICAgICAgc3RhdHVzOiBcInN1Y2Nlc3NcIlxuICAgICAgfSk7XG4gICAgfSxcbiAgICBbZXhlY3V0ZV1cbiAgKTtcbiAgY29uc3QgcmVzZXQgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgc2V0UmVzdWx0KGdldEVtcHR5UmVzdWx0KCkpO1xuICAgIHNldE9sZFJlc3VsdChnZXRFbXB0eU9sZFJlc3VsdCgpKTtcbiAgICBzZXRFeGVjdXRpbmcoZmFsc2UpO1xuICAgIHN0YXR1cy5jdXJyZW50ID0gXCJpZGxlXCI7XG4gICAgbGFzdFJldHJ5SWQuY3VycmVudCA9IDA7XG4gICAgcmV0cnlDb3VudC5jdXJyZW50ID0gMDtcbiAgfSwgW10pO1xuICBjb25zdCBpc1J1bm5pbmdDYWxsYmFja3MgPSB1c2VSZWYoZmFsc2UpO1xuICBjb25zdCBoYW5kbGVDYWxsYmFja3MgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgaWYgKCFleGVjdXRlUmVmLmN1cnJlbnQgfHwgaXNSdW5uaW5nQ2FsbGJhY2tzLmN1cnJlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaXNSdW5uaW5nQ2FsbGJhY2tzLmN1cnJlbnQgPSB0cnVlO1xuICAgIGlmIChzdGF0dXMuY3VycmVudCA9PT0gXCJzdWNjZXNzXCIpIHtcbiAgICAgIGV4ZWN1dGVSZWYuY3VycmVudD8uKFtyZXN1bHRSZWYuY3VycmVudC5kYXRhLCBudWxsXSk7XG4gICAgICBvcHRzPy5vblN1Y2Nlc3M/Lih7XG4gICAgICAgIGRhdGE6IHJlc3VsdFJlZi5jdXJyZW50LmRhdGFcbiAgICAgIH0pO1xuICAgICAgb3B0cz8ub25GaW5pc2g/LihbcmVzdWx0UmVmLmN1cnJlbnQuZGF0YSwgbnVsbF0pO1xuICAgIH1cbiAgICBpZiAoc3RhdHVzLmN1cnJlbnQgPT09IFwiZXJyb3JcIikge1xuICAgICAgZXhlY3V0ZVJlZi5jdXJyZW50Py4oW251bGwsIHJlc3VsdFJlZi5jdXJyZW50LmVycm9yXSk7XG4gICAgICBvcHRzPy5vbkVycm9yPy4oe1xuICAgICAgICBlcnI6IHJlc3VsdFJlZi5jdXJyZW50LmVycm9yXG4gICAgICB9KTtcbiAgICAgIG9wdHM/Lm9uRmluaXNoPy4oW251bGwsIHJlc3VsdFJlZi5jdXJyZW50LmVycm9yXSk7XG4gICAgfVxuICAgIGV4ZWN1dGVSZWYuY3VycmVudCA9IHZvaWQgMDtcbiAgICBzdGF0dXMuY3VycmVudCA9IFwiaWRsZVwiO1xuICAgIGlzUnVubmluZ0NhbGxiYWNrcy5jdXJyZW50ID0gZmFsc2U7XG4gIH0sIFtvcHRzPy5vbkVycm9yLCBvcHRzPy5vbkZpbmlzaCwgb3B0cz8ub25TdWNjZXNzXSk7XG4gIGNvbnN0IGlzUGVuZGluZyA9IGlzVHJhbnNpdGlvbmluZyB8fCBpc0V4ZWN1dGluZztcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoaXNQZW5kaW5nKVxuICAgICAgcmV0dXJuO1xuICAgIGhhbmRsZUNhbGxiYWNrcygpO1xuICB9LCBbc3RhdHVzLmN1cnJlbnQsIGlzUGVuZGluZ10pO1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBpZiAoZXhlY3V0ZVJlZi5jdXJyZW50ICE9PSB2b2lkIDApIHtcbiAgICAgICAgaGFuZGxlQ2FsbGJhY2tzKCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSwgW10pO1xuICBjb25zdCBmaW5hbCA9IGNhbGN1bGF0ZVJlc3VsdEZyb21TdGF0ZSh7XG4gICAgaXNQZW5kaW5nLFxuICAgIG9sZFJlc3VsdCxcbiAgICByZXN1bHQ6IHJlc3VsdFJlZi5jdXJyZW50LFxuICAgIHBlcnNpc3REYXRhV2hpbGVQZW5kaW5nOiBvcHRzPy5wZXJzaXN0RGF0YVdoaWxlUGVuZGluZyxcbiAgICBwZXJzaXN0RXJyb3JXaGlsZVBlbmRpbmc6IG9wdHM/LnBlcnNpc3RFcnJvcldoaWxlUGVuZGluZ1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICAuLi5maW5hbCxcbiAgICByZXNldCxcbiAgICBleGVjdXRlLFxuICAgIHNldE9wdGltaXN0aWMsXG4gICAgZXhlY3V0ZUZvcm1BY3Rpb25cbiAgfTtcbn07XG5leHBvcnQge1xuICB1c2VTZXJ2ZXJBY3Rpb25cbn07XG4iXSwibmFtZXMiOlsidXNlQ2FsbGJhY2siLCJ1c2VFZmZlY3QiLCJ1c2VSZWYiLCJ1c2VTdGF0ZSIsInVzZVRyYW5zaXRpb24iLCJldmFsdWF0ZU9wdGltaXN0aWNJbnB1dCIsImZuIiwib2xkUmVzdWx0IiwicmVzdWx0IiwiaXNGdW5jdGlvbiIsInZhbHVlIiwic3RhdHVzIiwiZGF0YSIsImNhbGN1bGF0ZVJlc3VsdEZyb21TdGF0ZSIsInN0YXRlIiwiaXNQZW5kaW5nIiwiaXNPcHRpbWlzdGljIiwicGVyc2lzdERhdGFXaGlsZVBlbmRpbmciLCJpc0Vycm9yIiwiZXJyb3IiLCJwZXJzaXN0RXJyb3JXaGlsZVBlbmRpbmciLCJpc1N1Y2Nlc3MiLCJnZXRFbXB0eVJlc3VsdCIsImluaXRpYWxEYXRhIiwiZ2V0RW1wdHlPbGRSZXN1bHQiLCJnZXRSZXRyeURlbGF5IiwicmV0cnlDb25maWciLCJyZXRyeUNvdW50IiwiZXJyIiwic2hvdWxkUmV0cnkiLCJtYXhBdHRlbXB0cyIsInJldHJ5RGVsYXkiLCJyZXRyeURlbGF5T3B0IiwiZGVsYXkiLCJtZXJnZVBvc3NpYmxlT2JqZWN0cyIsIm9iajEiLCJvYmoyIiwidXNlU2VydmVyQWN0aW9uIiwic2VydmVyQWN0aW9uIiwib3B0cyIsImJpbmRBcmdzIiwiYmluZCIsIiRzZXRSZXN1bHQiLCJyZXN1bHRSZWYiLCIkc2V0T2xkUmVzdWx0Iiwib2xkUmVzdWx0UmVmIiwibGFzdFJldHJ5SWQiLCJleGVjdXRlUmVmIiwiaXNUcmFuc2l0aW9uaW5nIiwic3RhcnRUcmFuc2l0aW9uIiwiaXNFeGVjdXRpbmciLCJzZXRFeGVjdXRpbmciLCJzZXRSZXN1bHQiLCJyZXN1bHQyIiwiY3VycmVudCIsInNldE9sZFJlc3VsdCIsIm9sZFJlc3VsdDIiLCJpbnRlcm5hbEV4ZWN1dGUiLCJpbnB1dCIsIm92ZXJyaWRlRGF0YSIsImFyZ3MiLCJpc0Zyb21SZXRyeUlkIiwibWVzc2FnZSIsInN0YWNrIiwibmFtZSIsImNvZGUiLCJyZXRyeUlkIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwib25TdGFydCIsInRoZW4iLCJyZXNwb25zZSIsInJldHJ5IiwiUHJvbWlzZSIsInJlc29sdmUiLCJzZXRUaW1lb3V0IiwicmVzIiwiZXhlY3V0ZSIsIm9wdHMyIiwiZXhlY3V0ZUZvcm1BY3Rpb24iLCJzZXRPcHRpbWlzdGljIiwicmVzZXQiLCJpc1J1bm5pbmdDYWxsYmFja3MiLCJoYW5kbGVDYWxsYmFja3MiLCJvblN1Y2Nlc3MiLCJvbkZpbmlzaCIsIm9uRXJyb3IiLCJmaW5hbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/zsa-react/dist/index.mjs\n");

/***/ })

};
;